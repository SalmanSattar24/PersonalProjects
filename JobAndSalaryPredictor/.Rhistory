return(column)
}
# Apply the fill_missing function to each column in the dataset
filled_data <- apply(data, 2, fill_missing)
# Output the filled dataset
write.csv(filled_data, "filled_dataset.csv", row.names = FALSE)
# Read the dataset from CSV file
data <- read.csv("your_dataset.csv", na.strings = "*")
# Function to fill missing values using linear regression
fill_missing <- function(column) {
if (any(is.na(column))) {
# Split the data into two parts: complete cases and incomplete cases
complete_cases <- !is.na(column)
incomplete_cases <- is.na(column)
# Check if there are enough complete cases to fit a model
if (sum(complete_cases) > 1) {
# Fit a linear regression model
lm_model <- lm(column[complete_cases] ~ seq_along(column[complete_cases]))
# Prepare the prediction data
prediction_data <- seq_along(column)
prediction_data[incomplete_cases] <- NA  # Set missing values to NA
# Predict missing values using the linear regression model
predicted_values <- predict(lm_model, newdata = data.frame(x = prediction_data))
# Replace missing values with predicted values
column[incomplete_cases] <- predicted_values
}
}
return(column)
}
# Load required libraries
library(tidyr)
library(dplyr)
# Read the dataset from CSV file
data <- read.csv("your_dataset.csv", na.strings = "*")
# Read the dataset from CSV file
data <- read.csv("gov_wages_cleaned_2022.csv", na.strings = "*")
# Function to fill missing values using linear regression
fill_missing <- function(column) {
if (any(is.na(column))) {
# Split the data into two parts: complete cases and incomplete cases
complete_cases <- !is.na(column)
incomplete_cases <- is.na(column)
# Check if there are enough complete cases to fit a model
if (sum(complete_cases) > 1) {
# Fit a linear regression model
lm_model <- lm(column[complete_cases] ~ seq_along(column[complete_cases]))
# Prepare the prediction data
prediction_data <- seq_along(column)
prediction_data[incomplete_cases] <- NA  # Set missing values to NA
# Predict missing values using the linear regression model
predicted_values <- predict(lm_model, newdata = data.frame(x = prediction_data))
# Replace missing values with predicted values
column[incomplete_cases] <- predicted_values
}
}
return(column)
}
# Apply the fill_missing function to each column in the dataset
filled_data <- apply(data, 2, fill_missing)
# Load necessary libraries
library(tidyr) # For handling missing values
library(dplyr) # Data manipulation
library(caret) # For linear model training and prediction
isntall.package("caret")
install.package("caret")
install.packages("caret")
# Load necessary libraries
library(tidyr) # For handling missing values
library(dplyr) # Data manipulation
library(caret) # For linear model training and prediction
# Load the data
data <- read.csv("/path/to/your/file.csv")
# Load the data
data <- read.csv("gov_wages.csv")
# Assuming A_MEAN is numeric but contains NA values and we'll use A_PCT90 as a predictor
# Convert relevant columns to numeric if they're not already
data$A_MEAN <- as.numeric(gsub(",", "", data$A_MEAN))
data$A_PCT90 <- as.numeric(gsub(",", "", data$A_PCT90))
# Remove rows with NAs in the predictor column
data_complete <- na.omit(data, cols = "A_PCT90")
# Train a linear model to predict A_MEAN using A_PCT90
model <- lm(A_MEAN ~ A_PCT90, data = data_complete)
# Predict A_MEAN for the rows where it's missing
missing_A_MEAN <- is.na(data$A_MEAN)
data$A_MEAN[missing_A_MEAN] <- predict(model, newdata = data[missing_A_MEAN, ])
# Load necessary libraries
library(tidyr) # For handling missing values
library(dplyr) # Data manipulation
library(caret) # For linear model training and prediction
# Load the data
data <- read.csv("/path/to/your/file.csv")
# Load the data
data <- read.csv("gov_wages.csv")
# Convert relevant columns to numeric, removing commas and ensuring proper conversion
data$A_MEAN <- as.numeric(gsub(",", "", data$A_MEAN))
data$A_PCT90 <- as.numeric(gsub(",", "", data$A_PCT90))
# Remove rows with NAs in the predictor or response column
data_complete <- na.omit(data, cols = c("A_PCT90", "A_MEAN"))
# Train a linear model to predict A_MEAN using A_PCT90
model <- lm(A_MEAN ~ A_PCT90, data = data_complete)
# Predict A_MEAN for the rows where it's missing using the correct newdata subset
missing_A_MEAN <- is.na(data$A_MEAN)
data$A_MEAN[missing_A_MEAN] <- predict(model, newdata = data[missing_A_MEAN, c("A_PCT90")])
# Assuming you've already loaded your data correctly
data <- read.csv("gov_wages.csv")
# Before converting, let's clean the columns of any non-numeric characters
# Replace commas, then convert to numeric
data$A_MEAN <- as.numeric(gsub("[^\\d.]", "", data$A_MEAN)) # Remove non-numeric except dot
data$A_PCT90 <- as.numeric(gsub("[^\\d.]", "", data$A_PCT90))
# Now, inspect the data to see if the conversion was successful and did not introduce NAs
summary(data$A_MEAN)
summary(data$A_PCT90)
# If the conversion was successful and you have enough data,
# proceed with removing NAs and training the model
data_complete <- na.omit(data[, c("A_MEAN", "A_PCT90")])
# Ensure there's enough data to fit the model
if(nrow(data_complete) > 0) {
model <- lm(A_MEAN ~ A_PCT90, data = data_complete)
# Check model summary to ensure it's sensible
summary(model)
# Use the model to predict missing A_MEAN values
missing_A_MEAN <- is.na(data$A_MEAN)
if(any(missing_A_MEAN)) {
predicted_values <- predict(model, newdata = data[missing_A_MEAN, , drop = FALSE])
data$A_MEAN[missing_A_MEAN] <- predicted_values
}
# Check your data after filling in missing A_MEAN values
summary(data$A_MEAN)
} else {
print("Not enough data to fit the model after removing NAs.")
}
# Use the model to predict missing A_MEAN values
missing_A_MEAN <- is.na(data$A_MEAN)
if(any(missing_A_MEAN)) {
predicted_values <- predict(model, newdata = data[missing_A_MEAN, , drop = FALSE])
data$A_MEAN[missing_A_MEAN] <- predicted_values
}
# Before converting, let's clean the columns of any non-numeric characters
# Replace commas, then convert to numeric
data$A_MEAN <- as.numeric(gsub("[^\\d.]", "", data$A_MEAN)) # Remove non-numeric except dot
data$A_PCT90 <- as.numeric(gsub("[^\\d.]", "", data$A_PCT90))
# Now, inspect the data to see if the conversion was successful and did not introduce NAs
summary(data$A_MEAN)
summary(data$A_PCT90)
# If the conversion was successful and you have enough data,
# proceed with removing NAs and training the model
data_complete <- na.omit(data[, c("A_MEAN", "A_PCT90")])
# Ensure there's enough data to fit the model
if(nrow(data_complete) > 0) {
model <- lm(A_MEAN ~ A_PCT90, data = data_complete)
# Check model summary to ensure it's sensible
summary(model)
# Use the model to predict missing A_MEAN values
missing_A_MEAN <- is.na(data$A_MEAN)
if(any(missing_A_MEAN)) {
predicted_values <- predict(model, newdata = data[missing_A_MEAN, , drop = FALSE])
data$A_MEAN[missing_A_MEAN] <- predicted_values
}
# Check your data after filling in missing A_MEAN values
summary(data$A_MEAN)
} else {
print("Not enough data to fit the model after removing NAs.")
}
# Load the necessary libraries
library(readr)
library(dplyr)
# Load the data from the csv file
df <- read.csv("gov_wages.csv")
# Make a copy of the dataframe
complete_df <- df
# Convert "*" to NA in the A_MEAN column
complete_df$A_MEAN[complete_df$A_MEAN == "*"] <- NA
# save the cleaned data to a new csv file
write.csv(complete_df, "gov_wages_cleaned.csv", row.names = FALSE)
library(dplyr)
# Load the data from the csv file
df <- read.csv("gov_wages.csv")
# Make a copy of the dataframe
complete_df <- df
# Convert "*" to NA in the A_MEAN column
complete_df$A_MEAN[complete_df$A_MEAN == "*"] <- NA
# Delete rows with NA values in the A_MEAN column
complete_df <- complete_df[complete_df$A_MEAN != "NA", ]
# save the cleaned data to a new csv file
write.csv(complete_df, "gov_wages_cleaned.csv", row.names = FALSE)
# Load the necessary libraries
library(readr)
library(dplyr)
# Load the data from the csv file
df <- read.csv("gov_wages.csv")
# Make a copy of the dataframe
complete_df <- df
# Convert "*" to NA in the A_MEAN column
complete_df$A_MEAN[complete_df$A_MEAN == "*"] <- NA
# Delete rows with NA values in the A_MEAN column
for (i in 1:nrow(complete_df)) {
if (is.na(complete_df$A_MEAN[i])) {
complete_df <- complete_df[-i, ]
}
}
# save the cleaned data to a new csv file
write.csv(complete_df, "gov_wages_cleaned.csv", row.names = FALSE)
# Delete rows with NA values in the A_MEAN column
for (i in 1:nrow(complete_df)) {
if (is.na(complete_df$A_MEAN[i])) {
complete_df <- complete_df[-i, ]
}
}
# save the cleaned data to a new csv file
write.csv(complete_df, "gov_wages_cleaned.csv", row.names = FALSE)
# Load the necessary libraries
library(readr)
library(dplyr)
# Load the data from the csv file
df <- read.csv("gov_wages.csv")
# Make a copy of the dataframe
complete_df <- df
# Convert "*" to NA in the A_MEAN column
complete_df$A_MEAN[complete_df$A_MEAN == "*"] <- NA
# Delete rows with NA values in the A_MEAN column
for (i in 1:nrow(complete_df)) {
if (is.na(complete_df$A_MEAN[i])) {
complete_df <- complete_df[-i, ]
}
}
# Train a liear model on the complete_df A_MEAN column to predict the missing values
model <- lm(A_MEAN ~ ., data = complete_df)
# Load the data from the csv file
df <- read.csv("gov_wages.csv")
# Make a copy of the dataframe
complete_df <- df
# Convert "*" to NA in the A_MEAN column
complete_df$A_MEAN[complete_df$A_MEAN == "*"] <- NA
# Delete rows with NA values in the A_MEAN column
for (i in 1:nrow(complete_df)) {
if (is.na(complete_df$A_MEAN[i])) {
complete_df <- complete_df[-i, ]
}
}
# Train a linear regression model on the complete_df A_MEAN column to predict the missing values
model <- lm(A_MEAN ~ ., data = complete_df)
# Load the necessary libraries
library(readr)
library(dplyr)
# Load the data from the csv file
df <- read.csv("gov_wages.csv")
# Make a copy of the dataframe
complete_df <- df
# Convert "*" to NA in the A_MEAN column
complete_df$A_MEAN[complete_df$A_MEAN == "*"] <- NA
# Convert the A_MEAN column to numeric
complete_df$A_MEAN <- as.numeric(complete_df$A_MEAN)
# Remove rows where A_MEAN is NA
complete_df <- complete_df[!is.na(complete_df$A_MEAN), ]
# Train a linear regression model on the complete dataframe using only the B_MEAN column as a predictor
model <- lm(A_MEAN ~ MEAN_PRSE, data = complete_df)
# Loop through the rows of the original dataframe
for (i in 1:nrow(df)) {
# If A_MEAN is "*", replace it with a predicted value
if (df[i, "A_MEAN"] == "*") {
df[i, "A_MEAN"] <- predict(model, newdata = df[i, ])
}
}
# Print the first 10 strong association rules
inspect(rules[1:10])
# Load the necessary libraries
library(arules)
install.packages("arules")
# Load the necessary libraries
library(arules)
install.packages("arules")
install.packages("arules")
install.packages("arulesViz")
# Load the necessary libraries
library(arules)
library(arulesViz)
# Load the data from the Groceries dataset
data("Groceries")
# Apply apriori() function to the Groceries dataset with a minimum support of 0.02 and a minimum confidence of 0.2
rules <- apriori(Groceries, parameter = list(support = 0.02, confidence = 0.2))
# Print the first 10 strong association rules
inspect(rules[1:10])
View(combined_data)
data("C:\Users\salma\OneDrive\Desktop\COMP 541\R-code\gov_wages.csv")
data("C:\Users\salma\OneDrive\Desktop\COMP 541\R-code\gov_wages.csv")
data("C:\\Users\salma\OneDrive\Desktop\COMP 541\R-code\gov_wages.csv")
data("C:\\Users\\salma\OneDrive\Desktop\COMP 541\R-code\gov_wages.csv")
data("C:\\Users\\salma\\OneDrive\\Desktop\\COMP 541\\R-code\gov_wages.csv")
data("C:\\Users\\salma\\OneDrive\\Desktop\\COMP 541\\R-code\\gov_wages.csv")
library(readxl)
dataset = read_excel("C:\Users\salma\OneDrive\Desktop\COMP 541\R-code\gov_wages.csv")
dataset = read_excel("C:/Users/salma/OneDrive/Desktop/COMP 541/R-code/gov_wages.csv")
dataset = read.csv2("C:/Users/salma/OneDrive/Desktop/COMP 541/R-code/gov_wages.csv")
view(dataset)
View(dataset)
install.packages("openxlsx")
clear
cls
library(readxl)
library(openxlsx)
dataset = read.csv2("C:/Users/salma/OneDrive/Desktop/COMP 541/R-code/gov_wages.csv")
write.xlsx(dataset, "C:/Users/salma/OneDrive/Desktop/COMP 541/R-code/gov_wages.xlsx")
View(dataset)
library(openxlsx)
dataset = read.csv2("C:/Users/salma/OneDrive/Desktop/COMP 541/R-code/national_M2022_dl.xlsx")
View(dataset)
str(dataset)
View(dataset)
dataset = read_excel("C:/Users/salma/OneDrive/Desktop/COMP 541/R-code/national_M2022_dl.xlsx")
library(readxl)
library(openxlsx)
dataset = read_excel("C:/Users/salma/OneDrive/Desktop/COMP 541/R-code/national_M2022_dl.xlsx")
# Install and load the openxlsx package
library(openxlsx)
# Specify the path to the Excel file
file_path <- "C:/Users/salma/OneDrive/Desktop/COMP 541/R-code/national_M2022_dl.xlsx"
# Read the Excel file
data <- read.xlsx(file_path)
# Install and load the readxl package
library(readxl)
# Specify the path to the Excel file
file_path <- "national_M2023_dl.xlsx"
# Read the Excel file
data <- read_xlsx(file_path)
View(data)
str(data)
data$A_MEAN
data[9, "A_MEAN"]
data[, "A_MEAN"]
data %>%
filter(OCC_TITLE == "Financial Managers") %>%
View()
# Install and load the readxl package
library(readxl)
library(dplyr)
# Specify the path to the Excel file
file_path <- "national_M2023_dl.xlsx"
# Read the Excel file
data <- read_xlsx(file_path)
View(data)
str(data)
data$A_MEAN
data[, "A_MEAN"]
data %>%
filter(OCC_TITLE == "Financial Managers") %>%
View()
# Specify the path to the Excel file
file_path <- "national_M2023_dl.xlsx"
# Read the Excel file
data <- read_xlsx(file_path)
View(data)
str(data)
data$A_MEAN
data[, "A_MEAN"]
data %>%
filter(OCC_TITLE == "Financial Managers") %>%
View()
# Load necessary library
library(tidyr)
library(dplyr)
library(ggplot2)
library(dplyr)
library(readxl)
# Read the Excel file
data_frame <- read_excel(file_path)
file_path <- "national_M2023_dl.xlsx"
# Assuming your data is already read into 'data_frame'
# Convert all relevant columns to numeric if not already
data_frame$A_MEDIAN <- as.numeric(as.character(data_frame$A_MEDIAN))
data_frame$H_PCT10 <- as.numeric(as.character(data_frame$H_PCT10))
# Split the data into sets with and without missing A_MEDIAN values
train_data <- data_frame %>% filter(!is.na(A_MEDIAN) & !is.na(H_PCT10))
test_data <- data_frame %>% filter(is.na(A_MEDIAN) & !is.na(H_PCT10))
# Create the linear model
model <- lm(A_MEDIAN ~ H_PCT10, data = train_data)
# Predict the A_MEDIAN for missing values
predicted_values <- predict(model, newdata = test_data)
# Replace NA in original data with predicted values
data_frame$A_MEDIAN[is.na(data_frame$A_MEDIAN)] <- predicted_values
# Check results
summary(data_frame)
View(data_frame)
# Convert A_MEDIAN to numeric. This will turn non-numeric strings to NA
data_frame$A_MEDIAN <- as.numeric(as.character(data_frame$A_MEDIAN))
# Handle possible warnings or errors in conversion
warnings()
# Now sort the data by A_MEDIAN in descending order
sorted_data <- data_frame %>%
arrange(desc(A_MEDIAN), .na.last = TRUE)
# View the top entries in the sorted data
head(sorted_data)
View(sorted_data)
# Assuming your data is already read into 'data_frame'
# Convert A_MEDIAN and A_MEAN to numeric if not already
data_frame$A_MEDIAN <- as.numeric(as.character(data_frame$A_MEDIAN))
data_frame$A_MEAN <- as.numeric(as.character(data_frame$A_MEAN))
# Create a new data frame for plotting top 10 occupations by A_MEDIAN
top_occupations <- data_frame %>%
drop_na(A_MEDIAN) %>%
arrange(desc(A_MEDIAN)) %>%
top_n(10) %>%
mutate(OCC_TITLE = factor(OCC_TITLE, levels = OCC_TITLE[order(A_MEDIAN)]))
# Plotting the top 10 occupations by median annual wage
ggplot(top_occupations, aes(x = OCC_TITLE, y = A_MEDIAN, fill = OCC_TITLE)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Top 10 Occupations by Median Annual Wage",
x = "Occupation Title",
y = "Median Annual Wage (A_MEDIAN)") +
coord_flip() # Flips the axes for better readability of occupation titles
# Scatter plot to compare A_MEDIAN and A_MEAN across all occupations
ggplot(data_frame, aes(x = A_MEDIAN, y = A_MEAN)) +
geom_point(aes(color = OCC_TITLE), alpha = 0.5) +
theme_minimal() +
labs(title = "Comparison of Median and Mean Annual Wages Across Occupations",
x = "Median Annual Wage (A_MEDIAN)",
y = "Mean Annual Wage (A_MEAN)") +
geom_smooth(method = "lm", color = "blue", se = FALSE) # Adds a linear regression line without confidence interval
# Plotting the top 10 occupations by median annual wage
ggplot(top_occupations, aes(x = OCC_TITLE, y = A_MEDIAN, fill = OCC_TITLE)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Top 10 Occupations by Median Annual Wage",
x = "Occupation Title",
y = "Median Annual Wage (A_MEDIAN)") +
coord_flip() # Flips the axes for better readability of occupation titles
# Create a new data frame for plotting top 10 occupations by A_MEDIAN
top_occupations <- data_frame %>%
drop_na(A_MEDIAN) %>%
arrange(desc(A_MEDIAN)) %>%
top_n(20) %>%
mutate(OCC_TITLE = factor(OCC_TITLE, levels = OCC_TITLE[order(A_MEDIAN)]))
# Plotting the top 10 occupations by median annual wage
ggplot(top_occupations, aes(x = OCC_TITLE, y = A_MEDIAN, fill = OCC_TITLE)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Top 10 Occupations by Median Annual Wage",
x = "Occupation Title",
y = "Median Annual Wage (A_MEDIAN)") +
coord_flip() # Flips the axes for better readability of occupation titles
# Scatter plot to compare A_MEDIAN and A_MEAN across all occupations
ggplot(data_frame, aes(x = A_MEDIAN, y = A_MEAN)) +
geom_point(aes(color = OCC_TITLE), alpha = 0.5) +
theme_minimal() +
labs(title = "Comparison of Median and Mean Annual Wages Across Occupations",
x = "Median Annual Wage (A_MEDIAN)",
y = "Mean Annual Wage (A_MEAN)") +
geom_smooth(method = "lm", color = "blue", se = FALSE) # Adds a linear regression line without confidence interval
# Execute the plot commands to display the charts
ggsave("top_occupations_bar_chart.png")
# Load necessary library
library(tidyr)
library(ggplot2)
library(dplyr)
library(readxl)
# Read the Excel file
data_frame <- read_excel(file_path)
file_path <- "national_M2023_dl.xlsx"
# Assuming your data is already read into 'data_frame'
# Convert all relevant columns to numeric if not already
data_frame$A_MEDIAN <- as.numeric(as.character(data_frame$A_MEDIAN))
data_frame$H_PCT10 <- as.numeric(as.character(data_frame$H_PCT10))
# Split the data into sets with and without missing A_MEDIAN values
train_data <- data_frame %>% filter(!is.na(A_MEDIAN) & !is.na(H_PCT10))
test_data <- data_frame %>% filter(is.na(A_MEDIAN) & !is.na(H_PCT10))
# Create the linear model
model <- lm(A_MEDIAN ~ H_PCT10, data = train_data)
# Predict the A_MEDIAN for missing values
predicted_values <- predict(model, newdata = test_data)
# Replace NA in original data with predicted values
data_frame$A_MEDIAN[is.na(data_frame$A_MEDIAN)] <- predicted_values
# Check results
summary(data_frame)
View(data_frame)
# Convert A_MEDIAN to numeric. This will turn non-numeric strings to NA
data_frame$A_MEDIAN <- as.numeric(as.character(data_frame$A_MEDIAN))
# Handle possible warnings or errors in conversion
warnings()
# Now sort the data by A_MEDIAN in descending order
sorted_data <- data_frame %>%
arrange(desc(A_MEDIAN), .na.last = TRUE)
# View the top entries in the sorted data
head(sorted_data)
View(sorted_data)
# Assuming your data is already read into 'data_frame'
# Convert A_MEDIAN and A_MEAN to numeric if not already
data_frame$A_MEDIAN <- as.numeric(as.character(data_frame$A_MEDIAN))
data_frame$A_MEAN <- as.numeric(as.character(data_frame$A_MEAN))
# Create a new data frame for plotting top 10 occupations by A_MEDIAN
top_occupations <- data_frame %>%
drop_na(A_MEDIAN) %>%
arrange(desc(A_MEDIAN)) %>%
top_n(20) %>%
mutate(OCC_TITLE = factor(OCC_TITLE, levels = OCC_TITLE[order(A_MEDIAN)]))
# Plotting the top 10 occupations by median annual wage
ggplot(top_occupations, aes(x = OCC_TITLE, y = A_MEDIAN, fill = OCC_TITLE)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Top 10 Occupations by Median Annual Wage",
x = "Occupation Title",
y = "Median Annual Wage (A_MEDIAN)") +
coord_flip() # Flips the axes for better readability of occupation titles
# Scatter plot to compare A_MEDIAN and A_MEAN across all occupations
ggplot(data_frame, aes(x = A_MEDIAN, y = A_MEAN)) +
geom_point(aes(color = OCC_TITLE), alpha = 0.5) +
theme_minimal() +
labs(title = "Comparison of Median and Mean Annual Wages Across Occupations",
x = "Median Annual Wage (A_MEDIAN)",
y = "Mean Annual Wage (A_MEAN)") +
geom_smooth(method = "lm", color = "blue", se = FALSE) # Adds a linear regression line without confidence interval
# Execute the plot commands to display the charts
ggsave("top_occupations_bar_chart.png")
